/data/data/com.termux/files/home/oop_lab1/include/dictionary_record.h:
    1|       |// include/dictionary_record.h
    2|       |
    3|       |#ifndef DICTIONARY_RECORD_H
    4|       |#define DICTIONARY_RECORD_H
    5|       |
    6|       |#include <string>
    7|       |
    8|       |struct DictionaryRecord {
    9|       |    std::string word;      // Слово, длина до 20 символов
   10|       |    std::string meaning;   // Толкование
   11|       |    int emphasis;          // Ударение, номер ударной гласной в слове
   12|       |
   13|       |    // Конструктор по умолчанию
   14|      1|    DictionaryRecord() : word(""), meaning(""), emphasis(0) {}
   15|       |
   16|       |    // Конструктор с параметрами
   17|       |    DictionaryRecord(const std::string& word, const std::string& meaning, int emphasis);
   18|       |
   19|       |    // Метод для вывода информации о записи (можно добавить дополнительные методы)
   20|       |    std::string toString() const;
   21|       |};
   22|       |
   23|       |#endif // DICTIONARY_RECORD_H

/data/data/com.termux/files/home/oop_lab1/src/dictionary_record.cpp:
    1|       |// src/dictionary_record.cpp
    2|       |
    3|       |#include "dictionary_record.h"
    4|       |#include <sstream>
    5|       |
    6|       |// Конструктор с параметрами
    7|       |DictionaryRecord::DictionaryRecord(const std::string& word, const std::string& meaning, int emphasis)
    8|      4|    : word(word), meaning(meaning), emphasis(emphasis) {}
    9|       |
   10|       |// Метод для вывода информации о записи
   11|      1|std::string DictionaryRecord::toString() const {
   12|      1|    std::stringstream ss;
   13|      1|    ss << "Word: " << word << ", Meaning: " << meaning << ", Emphasis: " << emphasis;
   14|      1|    return ss.str();
   15|      1|}

/data/data/com.termux/files/home/oop_lab1/src/xml_converter.cpp:
    1|       |// src/xml_converter.cpp
    2|       |
    3|       |#include "xml_converter.h"
    4|       |#include <sstream>
    5|       |#include "dictionary_record.h"
    6|       |#include <stdexcept>
    7|       |
    8|       |// Функция для преобразования DictionaryRecord в строку XML
    9|      1|std::string recordToXml(const DictionaryRecord& record, const std::string& recordName) {
   10|      1|    std::stringstream ss;
   11|      1|    ss << "<" << recordName << ">\n";
   12|      1|    ss << "  <word>" << record.word << "</word>\n";
   13|      1|    ss << "  <meaning>" << record.meaning << "</meaning>\n";
   14|      1|    ss << "  <emphasis>" << record.emphasis << "</emphasis>\n";
   15|      1|    ss << "</" << recordName << ">";
   16|      1|    return ss.str();
   17|      1|}
   18|       |
   19|       |// Функция для преобразования строки XML в DictionaryRecord
   20|      1|DictionaryRecord xmlToRecord(const std::string& xmlString) {
   21|       |    // Простейшая реализация парсинга XML
   22|       |    // На практике следует использовать специализированные библиотеки для парсинга XML
   23|      1|    std::string word, meaning;
   24|      1|    int emphasis = 0;
   25|       |
   26|      1|    size_t wordStart = xmlString.find("<word>") + 6;
   27|      1|    size_t wordEnd = xmlString.find("</word>");
   28|      1|    if (wordStart != std::string::npos && wordEnd != std::string::npos) {
   29|      1|        word = xmlString.substr(wordStart, wordEnd - wordStart);
   30|      1|    }
   31|       |
   32|      1|    size_t meaningStart = xmlString.find("<meaning>") + 9;
   33|      1|    size_t meaningEnd = xmlString.find("</meaning>");
   34|      1|    if (meaningStart != std::string::npos && meaningEnd != std::string::npos) {
   35|      1|        meaning = xmlString.substr(meaningStart, meaningEnd - meaningStart);
   36|      1|    }
   37|       |
   38|      1|    size_t emphasisStart = xmlString.find("<emphasis>") + 10;
   39|      1|    size_t emphasisEnd = xmlString.find("</emphasis>");
   40|      1|    if (emphasisStart != std::string::npos && emphasisEnd != std::string::npos) {
   41|      1|        emphasis = std::stoi(xmlString.substr(emphasisStart, emphasisEnd - emphasisStart));
   42|      1|    }
   43|       |
   44|      1|    return DictionaryRecord(word, meaning, emphasis);
   45|      1|}

/data/data/com.termux/files/home/oop_lab1/tests/test_dictionary_record.cpp:
    1|       |// tests/test_dictionary_record.cpp
    2|       |
    3|       |#include <gtest/gtest.h>
    4|       |#include "dictionary_record.h"
    5|       |
    6|       |// Тест: Конструктор по умолчанию
    7|      1|TEST(DictionaryRecordTest, DefaultConstructor) {
    8|      1|    DictionaryRecord record;
    9|      1|    EXPECT_EQ(record.word, "");
   10|      1|    EXPECT_EQ(record.meaning, "");
   11|      1|    EXPECT_EQ(record.emphasis, 0);
   12|      1|}
   13|       |
   14|       |// Тест: Конструктор с параметрами
   15|      1|TEST(DictionaryRecordTest, ParameterizedConstructor) {
   16|      1|    DictionaryRecord record("apple", "a fruit", 2);
   17|      1|    EXPECT_EQ(record.word, "apple");
   18|      1|    EXPECT_EQ(record.meaning, "a fruit");
   19|      1|    EXPECT_EQ(record.emphasis, 2);
   20|      1|}
   21|       |
   22|       |// Тест: Метод toString()
   23|      1|TEST(DictionaryRecordTest, ToString) {
   24|      1|    DictionaryRecord record("apple", "a fruit", 2);
   25|      1|    std::string expectedString = "Word: apple, Meaning: a fruit, Emphasis: 2";
   26|      1|    EXPECT_EQ(record.toString(), expectedString);
   27|      1|}

/data/data/com.termux/files/home/oop_lab1/tests/test_main.cpp:
    1|       |// tests/test_main.cpp
    2|       |
    3|       |#include <gtest/gtest.h>
    4|       |
    5|       |// Функция main для запуска всех тестов
    6|      1|int main(int argc, char **argv) {
    7|      1|    ::testing::InitGoogleTest(&argc, argv);
    8|      1|    return RUN_ALL_TESTS();
    9|      1|}

/data/data/com.termux/files/home/oop_lab1/tests/test_xml_converter.cpp:
    1|       |// tests/test_xml_converter.cpp
    2|       |
    3|       |#include <gtest/gtest.h>
    4|       |#include "xml_converter.h"
    5|       |#include "dictionary_record.h"
    6|       |
    7|       |// Тест: Преобразование записи в XML
    8|      1|TEST(XmlConverterTest, RecordToXml) {
    9|      1|    DictionaryRecord record("apple", "a fruit", 2);
   10|      1|    std::string xml = recordToXml(record, "record");
   11|      1|    std::string expectedXml = "<record>\n  <word>apple</word>\n  <meaning>a fruit</meaning>\n  <emphasis>2</emphasis>\n</record>";
   12|      1|    EXPECT_EQ(xml, expectedXml);
   13|      1|}
   14|       |
   15|       |// Тест: Преобразование XML в запись
   16|      1|TEST(XmlConverterTest, XmlToRecord) {
   17|      1|    std::string xml = "<record>\n  <word>apple</word>\n  <meaning>a fruit</meaning>\n  <emphasis>2</emphasis>\n</record>";
   18|      1|    DictionaryRecord record = xmlToRecord(xml);
   19|      1|    EXPECT_EQ(record.word, "apple");
   20|      1|    EXPECT_EQ(record.meaning, "a fruit");
   21|      1|    EXPECT_EQ(record.emphasis, 2);
   22|      1|}

